# spec.yaml  – Starter v0.1

name: GameBoy
version: 0.1

cpu:
  description: "8-bit Sharp LR35902 core (Intel 8080 + Z80 hybrid)"
  registers:
    A:   { bits: 8,  role: "Accumulator" }
    F:   { bits: 8,  role: "Flag register (Z N H C)" }
    PC:  { bits: 16, role: "Program Counter" }
  alu_ops:
    - { mnemonic: ADD_A_n8, operands: ["imm8"], effect: "A ← A + imm8" }
    - { mnemonic: SUB_A_n8, operands: ["imm8"], effect: "A ← A – imm8" }
    - { mnemonic: AND_A_n8, operands: ["imm8"], effect: "A ← A & imm8" }
    - { mnemonic: OR_A_n8,  operands: ["imm8"], effect: "A ← A | imm8" }
    - { mnemonic: XOR_A_n8, operands: ["imm8"], effect: "A ← A ^ imm8" }
    - { mnemonic: INC_A,    operands: [],       effect: "A ← A + 1" }
    - { mnemonic: DEC_A,    operands: [],       effect: "A ← A - 1" }

  load_store_ops:
    - { mnemonic: LD_r_r,        operands: ["r1", "r2"], effect: "r1 ← r2" }
    - { mnemonic: LD_A_n8_ptr,   operands: ["n8"],       effect: "A ← [n8]" }
    - { mnemonic: LD_n8_A_ptr,   operands: ["n8"],       effect: "[n8] ← A" }

  control_ops:
    - { mnemonic: JP_a16,   operands: ["addr"],  effect: "PC ← addr" }
    - { mnemonic: JR_r8,    operands: ["rel8"],  effect: "PC ← PC + rel8" }
    - { mnemonic: CALL_a16, operands: ["addr"],  effect: "push(PC); PC ← addr" }
    - { mnemonic: RET,      operands: [],        effect: "PC ← pop()" }

joypad:
  description: "Joypad input register interface"
  registers:
    P1:
      addr: 0xFF00
      bits: 8
      role: "Joypad input: button selection and state (active low)"

memory:
  description: "Address map stub – grow section by section"
  regions:       # ✨ Mentee B will flesh this out
    - { name: ROM0,  base: 0x0000, size: 0x4000, readable: true, writable: false }
    - { name: ROMX,  base: 0x4000, size: 0x4000, readable: true, writable: false }
    - { name: VRAM,  base: 0x8000, size: 0x2000, readable: true, writable: true  }
    - { name: WRAM0, base: 0xC000, size: 0x1000, readable: true, writable: true  }
    - { name: WRAMX, base: 0xD000, size: 0x1000, readable: true, writable: true  }
    - { name: OAM,   base: 0xFE00, size: 0x00A0, readable: true, writable: true  }
    - { name: HRAM,  base: 0xFF80, size: 0x007F, readable: true, writable: true  }

ppu:
  description: "LCD controller registers only for now"
  registers:     # ✨ Mentee C will expand here
    LY:   { addr: 0xFF44, bits: 8, role: "Current scanline" }
    LCDC: { addr: 0xFF40, bits: 8, role: "LCD control" }
    STAT: { addr: 0xFF41, bits: 8, role: "LCD status flags & mode" }
    SCY:  { addr: 0xFF42, bits: 8, role: "BG viewport Y scroll" }
    SCX:  { addr: 0xFF43, bits: 8, role: "BG viewport X scroll" }
    WY:   { addr: 0xFF4A, bits: 8, role: "Window Y position" }
    WX:   { addr: 0xFF4B, bits: 8, role: "Window X position plus 7" }

apu:
  description: "Audio Processing Unit – stub (no sound logic)"
  registers:
    NR10: { addr: 0xFF10, bits: 8, role: "CH1 sweep" }
    NR11: { addr: 0xFF11, bits: 8, role: "CH1 length/duty" }
    NR12: { addr: 0xFF12, bits: 8, role: "CH1 envelope" }
    NR13: { addr: 0xFF13, bits: 8, role: "CH1 frequency lo" }
    NR14: { addr: 0xFF14, bits: 8, role: "CH1 frequency hi" }
    NR52: { addr: 0xFF26, bits: 8, role: "Sound on/off" }
    WAVE_RAM:
      addr: 0xFF30
      size: 16
      bits: 8
      role: "Waveform RAM (Channel 3)"